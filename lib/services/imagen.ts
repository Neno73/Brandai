/**
 * Google Imagen 3 (Nanobana) Image Generation Service
 *
 * Uses Google's Gemini API for image generation.
 * As of early 2025, Imagen 3 is available through the Gemini API.
 */

import { put } from '@vercel/blob'

const GEMINI_API_KEY = process.env.GEMINI_API_KEY
const IMAGEN_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-001:predict'

export interface ImagenGenerationOptions {
  prompt: string
  aspectRatio?: '1:1' | '16:9' | '9:16' | '4:3' | '3:4'
  numberOfImages?: number // 1-4
  negativePrompt?: string
  safetySettings?: 'BLOCK_NONE' | 'BLOCK_FEW' | 'BLOCK_SOME' | 'BLOCK_MOST'
}

export interface ImagenResponse {
  imageUrl: string
  mimeType: string
  base64Data?: string
}

/**
 * Generate an image using Imagen 3 (Nanobana)
 * Returns the image URL stored in Vercel Blob
 */
export async function generateImage(
  options: ImagenGenerationOptions
): Promise<ImagenResponse> {
  if (!GEMINI_API_KEY) {
    throw new Error('GEMINI_API_KEY is not configured')
  }

  const {
    prompt,
    aspectRatio = '1:1',
    numberOfImages = 1,
    negativePrompt,
    safetySettings = 'BLOCK_FEW',
  } = options

  try {
    // Call Imagen API
    const response = await fetch(`${IMAGEN_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        instances: [
          {
            prompt,
            negative_prompt: negativePrompt,
          },
        ],
        parameters: {
          sampleCount: numberOfImages,
          aspectRatio,
          safetyFilterLevel: safetySettings,
          personGeneration: 'DONT_ALLOW', // Don't generate people for merchandise
        },
      }),
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      throw new Error(
        `Imagen API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`
      )
    }

    const data = await response.json()

    // Extract the generated image
    if (!data.predictions || data.predictions.length === 0) {
      throw new Error('No images generated by Imagen')
    }

    const prediction = data.predictions[0]

    // Imagen returns base64-encoded image data
    const base64Image = prediction.bytesBase64Encoded
    const mimeType = prediction.mimeType || 'image/png'

    if (!base64Image) {
      throw new Error('No image data returned from Imagen')
    }

    // Convert base64 to buffer
    const imageBuffer = Buffer.from(base64Image, 'base64')

    // Upload to Vercel Blob
    const timestamp = Date.now()
    const extension = mimeType.split('/')[1] || 'png'
    const blob = await put(
      `motifs/${timestamp}-motif.${extension}`,
      imageBuffer,
      {
        access: 'public',
        contentType: mimeType,
        addRandomSuffix: true,
      }
    )

    return {
      imageUrl: blob.url,
      mimeType,
      base64Data: base64Image,
    }
  } catch (error) {
    console.error('Imagen generation error:', error)
    throw error
  }
}

/**
 * Generate a motif image specifically for merchandise
 * Includes enhanced prompt engineering for print-ready designs
 */
export async function generateMotifImage(
  motifPrompt: string,
  colors: string[],
  aspectRatio: '1:1' | '16:9' | '9:16' | '4:3' | '3:4' = '1:1'
): Promise<ImagenResponse> {
  // Enhance prompt for merchandise design
  const enhancedPrompt = `${motifPrompt}

Style requirements:
- High resolution, print-ready quality
- Clean, professional graphic design
- Bold, clear visual elements suitable for merchandise printing
- Simple, impactful composition
- Colors: ${colors.join(', ')}
- No text, typography, or words in the design
- No realistic human faces or identifiable people
- Vector art style with clean lines
- Transparent or solid background suitable for printing`

  const negativePrompt = 'text, words, letters, typography, watermarks, signatures, realistic photos, cluttered, messy, low quality, blurry, pixelated, human faces, people, portraits'

  return generateImage({
    prompt: enhancedPrompt,
    aspectRatio,
    numberOfImages: 1,
    negativePrompt,
    safetySettings: 'BLOCK_FEW',
  })
}

/**
 * Fallback: Generate placeholder if Imagen fails
 * Uses a deterministic placeholder based on colors
 */
export function generatePlaceholderMotif(
  title: string,
  colors: string[]
): string {
  const colorParam = colors.length > 0 ? colors[0].replace('#', '') : 'cccccc'
  return `https://via.placeholder.com/1000x1000/${colorParam}/ffffff?text=${encodeURIComponent(
    title + ' Motif'
  )}`
}
